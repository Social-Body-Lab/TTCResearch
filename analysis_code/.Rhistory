hourly_sub = hourly_sub[order(as.Date(hourly_sub$datetime_edt)),]
hourly_sub[148,4] = 5.1711
hourly_sub[149,4] = 5.1409
hourly_sub[150,4] = 5.1231
hourly_sub[151,4] = 5.1321
hourly_sub[152,4] = 5.1539
hourly_sub[153,4] = 5.1738
#plot the data
p = qplot(data = hourly_sub, datetime_edt, mean_valence) +
geom_vline(xintercept=debate, linetype="dashed", color = "grey", size=.5, alpha = .75) +
geom_vline(xintercept=hicks_positive, linetype="dashed", color = "grey", size=.5, alpha = .75) +
geom_vline(xintercept=positive_test_tweet, linetype="dashed", color = "grey", size=.5, alpha = .75) +
geom_vline(xintercept=goes_to_hospital, linetype="dashed", color = "grey", size=.5, alpha = .75) +
geom_vline(xintercept=visits_supporters, linetype="dashed", color = "grey", size=.5, alpha = .75) +
geom_vline(xintercept=hosp_discharge_tweet, linetype="dashed", color = "grey", size=.5, alpha = .75) +
geom_vline(xintercept=hosp_discharge, linetype="dashed", color = "grey", size=.5, alpha = .75) +
geom_label(aes(x = debate, y=5.45, label='Debate'),hjust=.5,vjust=0,size=2, family='Helvetica', fontface='bold') +
geom_label(aes(x = hicks_positive, y=5.4, label='Aid tests positive'),hjust=.5,vjust=0,size=2, family='Helvetica', fontface='bold') +
geom_label(aes(x = positive_test_tweet, y=5.45, label='Positive test'),hjust=.5,vjust=0,size=2, family='Helvetica', fontface='bold') +
geom_label(aes(x = goes_to_hospital, y=5.4, label='Goes to hospital'),hjust=.5,vjust=0,size=2, family='Helvetica', fontface='bold') +
geom_label(aes(x = visits_supporters, y=5.45, label='Visits supporters'),hjust=.5,vjust=0,size=2, family='Helvetica', fontface='bold') +
geom_label(aes(x = hosp_discharge_tweet, y=5.45, label='Tweets about discharge'),hjust=.5,vjust=0,size=2, family='Helvetica', fontface='bold') +
geom_label(aes(x = hosp_discharge, y=5.4, label='Discharged from hospital'),hjust=.5,vjust=0,size=2, family='Helvetica', fontface='bold') +
geom_smooth(formula = 'y ~ x', method = "loess", span = .1, size = .75, color = "black") +
geom_point(aes(size = count*10)) +
scale_size_continuous(label=comma) +
ylim(5.0, 5.5) +
xlim(start,end) +
scale_x_datetime(limits = lims, breaks=breaks, labels=date_format("%b %d \n %I:%M %p", tz = "America/New_York")) +
xlab("Date") + ylab ("Tweet positivity") + labs(size='Tweet count') +
ggtitle("Positivity scores for tweets about President Trump") +
original_theme +
theme(legend.key=element_blank())
ggsave("./Desktop/positivity_time_lines_labels.jpg", p, width = 12, height = 4, dpi = 600)
### ### ###
#plot the data
p_no_lab = qplot(data = hourly_sub, datetime_edt, mean_valence) +
geom_vline(xintercept=debate, linetype="dashed", color = "grey", size=.5, alpha = .75) +
geom_vline(xintercept=hicks_positive, linetype="dashed", color = "grey", size=.5, alpha = .75) +
geom_vline(xintercept=positive_test_tweet, linetype="dashed", color = "grey", size=.5, alpha = .75) +
geom_vline(xintercept=goes_to_hospital, linetype="dashed", color = "grey", size=.5, alpha = .75) +
geom_vline(xintercept=visits_supporters, linetype="dashed", color = "grey", size=.5, alpha = .75) +
geom_vline(xintercept=hosp_discharge_tweet, linetype="dashed", color = "grey", size=.5, alpha = .75) +
geom_vline(xintercept=hosp_discharge, linetype="dashed", color = "grey", size=.5, alpha = .75) +
geom_smooth(formula = 'y ~ x', method = "loess", span = .1, size = .75, color = "black") +
geom_point(aes(size = count*10)) +
scale_size_continuous(label=comma) +
ylim(5.0, 5.5) +
xlim(start,end) +
scale_x_datetime(limits = lims, breaks=breaks, labels=date_format("%b %d \n %I:%M %p", tz = "America/New_York")) +
xlab("Date") + ylab ("Tweet positivity") + labs(size='Tweet count') +
ggtitle("Positivity scores for tweets about President Trump") +
original_theme +
theme(legend.key=element_blank())
ggsave("./Desktop/positivity_time_lines_only.jpg", p_no_lab, width = 12, height = 4, dpi = 600)
### ### ###
#plot the data
p_plain = qplot(data = hourly_sub, datetime_edt, mean_valence) +
geom_smooth(formula = 'y ~ x', method = "loess", span = .1, size = .75, color = "black") +
geom_point(aes(size = count*10)) +
scale_size_continuous(label=comma) +
ylim(5.0, 5.5) +
xlim(start,end) +
scale_x_datetime(limits = lims, breaks=breaks, labels=date_format("%b %d \n %I:%M %p", tz = "America/New_York")) +
xlab("Date") + ylab ("Tweet positivity") + labs(size='Tweet count') +
ggtitle("Positivity scores for tweets about President Trump") +
original_theme +
theme(legend.key=element_blank())
ggsave("./Desktop/positivity_time_plain.jpg", p_plain, width = 12, height = 4, dpi = 600)
################################################################################################################################################
View(sub)
words = read.csv("/Users/arrandavis/Dropbox/textureAI/internal_projects/trump_sympathy/data/word_counts_by_valence.csv")
words$word_type
lows = subset(words, words$word_type == "Low valence")
highs = subset(words, words$word_type == "High valence")
View(words)
#word clouds
plot_wc = function(plot_data,
order_by,
pal,
title,
pos=T,
family='sans',
n_words=60,
scale=c(3,.001),
rots=0){
plot_dat = plot_data[order(plot_data[,order_by],decreasing=T),]
plot_dat$x = plot_dat[,order_by][order(plot_dat[,order_by],decreasing=pos)]
layout(matrix(c(1, 2), nrow=2), heights=c(1, 20))
par(mar=rep(0, 4))
plot.new()
text(x=0.5, y=0.5, title)
wordcloud(plot_dat$word,
plot_dat$x,
max.words=n_words,
random.order = F,
scale=scale,
min.freq=1,
rot.per=rots,
colors=pal,
main=title,
family=family)
}#define colours
pal2 = brewer.pal(9,"Greys")#transform data
library(brewer)
library(RColorBrewer)
library(wordcloud)
install.packages("wordcloud")
pal2 = brewer.pal(9,"Greys")#transform data
#texture fonts
quartzFonts(texture_helv  = c('Helvetica-Bold',
'Helvetica-Bold',
'Helvetica-Oblique',
'Helvetica-BoldOblique'))
plot_wc(lows,
order_by='count',
pos=T,
pal=pal2,
title = "Low positivity tweets",
n_words=100,
family='texture_helv',
scale=c(2,.1))
library(wordcloud)
plot_wc(lows,
order_by='count',
pos=T,
pal=pal2,
title = "Low positivity tweets",
n_words=100,
family='texture_helv',
scale=c(2,.1))
plot_wc(lows,
order_by='count',
pos=T,
pal=pal2,
title = "Low positivity tweets",
n_words=100,
family='texture_helv',
scale=c(2,1))
pal2 = brewer.pal(9,"Greys")[2:9]
plot_wc(lows,
order_by='count',
pos=T,
pal=pal2,
title = "Low positivity tweets",
n_words=100,
family='texture_helv',
scale=c(2,1))
pal2 = brewer.pal(9,"Greys")[4:9]
plot_wc(lows,
order_by='count',
pos=T,
pal=pal2,
title = "Low positivity tweets",
n_words=100,
family='texture_helv',
scale=c(2,1))
pal2 = brewer.pal(9,"Greys")[3:9]
plot_wc(lows,
order_by='count',
pos=T,
pal=pal2,
title = "Low positivity tweets",
n_words=100,
family='texture_helv',
scale=c(2,1))
plot_wc(lows,
order_by='count',
pos=T,
pal=pal2,
title = "Low positivity tweets",
n_words=100,
family='texture_helv',
scale=c(4,.5))
plot_wc(lows,
order_by='count',
pos=T,
pal=pal2,
title = "Low positivity tweets",
n_words=100,
family='texture_helv',
scale=c(4,.75))
install.packages("emojifont")
plot_wc(lows,
order_by='count',
pos=T,
pal=pal2,
title = "Low positivity tweets",
n_words=50,
family='texture_helv',
scale=c(4,.75))
library(emojifont)
!startsWith(words$word, ":")
!startsWith(as.character(words$word), ":")
words = words[!startsWith(as.character(words$word), ":") ]]
words = words[!startsWith(as.character(words$word), ":") ]
words = words[!startsWith(as.character(words$word), ":"), ]
View(words)
library(RColorBrewer)
library(wordcloud)
library(emojifont)
words = read.csv("/Users/arrandavis/Dropbox/textureAI/internal_projects/trump_sympathy/data/word_counts_by_valence.csv")
words = words[!startsWith(as.character(words$word), ":"), ]
lows = subset(words, words$word_type == "Low valence")
highs = subset(words, words$word_type == "High valence")
#plot low words
low_plot = plot_wc(lows,
order_by='count',
pos=T,
pal=pal2,
title = "Low positivity tweets",
n_words=50,
family='texture_helv',
scale=c(4,.75))
#plot low words
low_plot = plot_wc(lows,
order_by='count',
pos=T,
pal=pal2,
title = "",
n_words=50,
family='texture_helv',
scale=c(4,.75))
#plot high words
high_plot = plot_wc(highs,
order_by='count',
pos=T,
pal=pal2,
title = "",
n_words=50,
family='texture_helv',
scale=c(4,.75))
#plot high words
high_plot = plot_wc(highs,
order_by='count',
pos=T,
pal=pal2,
title = "",
n_words=50,
family='texture_helv',
scale=c(2,.75))
#plot high words
high_plot = plot_wc(highs,
order_by='count',
pos=T,
pal=pal2,
title = "",
n_words=50,
family='texture_helv',
scale=c(4,1))
View(highs)
words = subset(words, words$word != "")
lows = subset(words, words$word_type == "Low valence")
highs = subset(words, words$word_type == "High valence")
#plot low words
low_plot = plot_wc(lows,
order_by='count',
pos=T,
pal=pal2,
title = "",
n_words=50,
family='texture_helv',
scale=c(4,.75))
#plot high words
high_plot = plot_wc(highs,
order_by='count',
pos=T,
pal=pal2,
title = "",
n_words=50,
family='texture_helv',
scale=c(4,1))
#plot high words
high_plot = plot_wc(highs,
order_by='count',
pos=T,
pal=pal2,
title = "",
n_words=50,
family='texture_helv',
scale=c(4,2))
#plot high words
high_plot = plot_wc(highs,
order_by='count',
pos=T,
pal=pal2,
title = "",
n_words=50,
family='texture_helv',
scale=c(4,2))
highs
highs[1,1]
highs = highs[order((highs$count)),]
?order
highs = highs[order((highs$count), decreasing = TRUE),]
highs[1,1]
highs[1,1] = 1000
#plot high words
high_plot = plot_wc(highs,
order_by='count',
pos=T,
pal=pal2,
title = "",
n_words=50,
family='texture_helv',
scale=c(4,2))
#plot high words
high_plot = plot_wc(highs,
order_by='count',
pos=T,
pal=pal2,
title = "",
n_words=50,
family='texture_helv',
scale=c(4,.75))
#plot low words
low_plot = plot_wc(lows,
order_by='count',
pos=T,
pal=pal2,
title = "",
n_words=50,
family='texture_helv',
scale=c(4,.75))
low_plot
getwd()
jpeg("./Desktop/low_valence_wc.jpg", height = 6, width = 6, res = 300, units = "in")
#plot low words
low_plot = plot_wc(lows,
order_by='count',
pos=T,
pal=pal2,
title = "",
n_words=50,
family='texture_helv',
scale=c(4,.75))
jpeg("./Desktop/low_valence_wc.jpg", height = 6, width = 6, res = 300, units = "in")
low_plot
dev.off()
getwd()
#plot low words
low_plot = plot_wc(lows,
order_by='count',
pos=T,
pal=pal2,
title = "",
n_words=50,
family='texture_helv',
scale=c(4,.75))
jpeg("./Desktop/low_valence_wc.jpg", height = 6, width = 6, res = 300, units = "in")
low_plot
dev.off()
#plot low words
plot_wc(lows,
order_by='count',
pos=T,
pal=pal2,
title = "",
n_words=50,
family='texture_helv',
scale=c(4,.75))
jpeg("./Desktop/low_valence_wc.jpg", height = 6, width = 6, res = 300, units = "in")
dev.off()
#plot low words
jpeg("./Desktop/low_valence_wc.jpg", height = 6, width = 6, res = 300, units = "in")
plot_wc(lows,
order_by='count',
pos=T,
pal=pal2,
title = "",
n_words=50,
family='texture_helv',
scale=c(4,.75))
dev.off()
#plot high words
jpeg("./Desktop/high_valence_wc.jpg", height = 6, width = 6, res = 300, units = "in")
high_plot = plot_wc(highs,
order_by='count',
pos=T,
pal=pal2,
title = "",
n_words=50,
family='texture_helv',
scale=c(4,.75))
dev.off()
nrow(dat)
qplot(data = hourly_sub, datetime_edt, mean_valence) +
geom_vline(xintercept=debate, linetype="dashed", color = "grey", size=.5, alpha = .75) +
geom_vline(xintercept=hicks_positive, linetype="dashed", color = "grey", size=.5, alpha = .75) +
geom_vline(xintercept=positive_test_tweet, linetype="dashed", color = "grey", size=.5, alpha = .75) +
geom_vline(xintercept=goes_to_hospital, linetype="dashed", color = "grey", size=.5, alpha = .75) +
geom_vline(xintercept=visits_supporters, linetype="dashed", color = "grey", size=.5, alpha = .75) +
geom_vline(xintercept=hosp_discharge_tweet, linetype="dashed", color = "grey", size=.5, alpha = .75) +
geom_vline(xintercept=hosp_discharge, linetype="dashed", color = "grey", size=.5, alpha = .75) +
geom_label(aes(x = debate, y=5.45, label='Debate'),hjust=.5,vjust=0,size=2, family='Helvetica', fontface='bold') +
geom_label(aes(x = hicks_positive, y=5.4, label='Aid tests positive'),hjust=.5,vjust=0,size=2, family='Helvetica', fontface='bold') +
geom_label(aes(x = positive_test_tweet, y=5.45, label='Positive test'),hjust=.5,vjust=0,size=2, family='Helvetica', fontface='bold') +
geom_label(aes(x = goes_to_hospital, y=5.4, label='Goes to hospital'),hjust=.5,vjust=0,size=2, family='Helvetica', fontface='bold') +
geom_label(aes(x = visits_supporters, y=5.45, label='Visits supporters'),hjust=.5,vjust=0,size=2, family='Helvetica', fontface='bold') +
geom_label(aes(x = hosp_discharge_tweet, y=5.45, label='Tweets about discharge'),hjust=.5,vjust=0,size=2, family='Helvetica', fontface='bold') +
geom_label(aes(x = hosp_discharge, y=5.4, label='Discharged from hospital'),hjust=.5,vjust=0,size=2, family='Helvetica', fontface='bold') +
geom_smooth(formula = 'y ~ x', method = "loess", span = .1, size = .75, color = "black") +
geom_point(aes(size = count*10)) +
scale_size_continuous(label=comma) +
ylim(5.0, 5.5) +
xlim(start,end) +
scale_x_datetime(limits = lims, breaks=breaks, labels=date_format("%b %d \n %I:%M %p", tz = "America/New_York")) +
xlab("Date") + ylab ("Tweet positivity") + labs(size='Tweet count') +
ggtitle("Positivity scores for tweets about President Trump") +
original_theme +
theme(legend.key=element_blank())
qplot(data = hourly_sub, datetime_edt, mean_valence) +
geom_vline(xintercept=debate, linetype="dashed", color = "grey", size=.5, alpha = .75) +
geom_vline(xintercept=hicks_positive, linetype="dashed", color = "grey", size=.5, alpha = .75) +
geom_vline(xintercept=positive_test_tweet, linetype="dashed", color = "grey", size=.5, alpha = .75) +
geom_vline(xintercept=goes_to_hospital, linetype="dashed", color = "grey", size=.5, alpha = .75) +
geom_vline(xintercept=visits_supporters, linetype="dashed", color = "grey", size=.5, alpha = .75) +
geom_vline(xintercept=hosp_discharge_tweet, linetype="dashed", color = "grey", size=.5, alpha = .75) +
geom_vline(xintercept=hosp_discharge, linetype="dashed", color = "grey", size=.5, alpha = .75) +
geom_label(aes(x = debate, y=5.45, label='Debate'),hjust=0,angle=45,vjust=0,size=2, family='Helvetica', fontface='bold') +
geom_label(aes(x = hicks_positive, y=5.4, label='Aid tests positive'),hjust=.5,vjust=0,size=2, family='Helvetica', fontface='bold') +
geom_label(aes(x = positive_test_tweet, y=5.45, label='Positive test'),hjust=.5,vjust=0,size=2, family='Helvetica', fontface='bold') +
geom_label(aes(x = goes_to_hospital, y=5.4, label='Goes to hospital'),hjust=.5,vjust=0,size=2, family='Helvetica', fontface='bold') +
geom_label(aes(x = visits_supporters, y=5.45, label='Visits supporters'),hjust=.5,vjust=0,size=2, family='Helvetica', fontface='bold') +
geom_label(aes(x = hosp_discharge_tweet, y=5.45, label='Tweets about discharge'),hjust=.5,vjust=0,size=2, family='Helvetica', fontface='bold') +
geom_label(aes(x = hosp_discharge, y=5.4, label='Discharged from hospital'),hjust=.5,vjust=0,size=2, family='Helvetica', fontface='bold') +
geom_smooth(formula = y ~ x, method = "loess", span = .1, size = .75, color = "black") +
geom_point(aes(size = count*10)) +
scale_size_continuous(label=comma) +
ylim(5.0, 5.5) +
xlim(start,end) +
scale_x_datetime(limits = lims, breaks=breaks, labels=date_format("%b %d \n %I:%M %p", tz = "America/New_York")) +
xlab("Date") + ylab ("Tweet positivity") + labs(size='Tweet count') +
ggtitle("Positivity scores for tweets about President Trump") +
original_theme +
theme(legend.key=element_blank())
qplot(data = hourly_sub, datetime_edt, mean_valence) +
geom_vline(xintercept=debate, linetype="dashed", color = "grey", size=.5, alpha = .75) +
geom_vline(xintercept=hicks_positive, linetype="dashed", color = "grey", size=.5, alpha = .75) +
geom_vline(xintercept=positive_test_tweet, linetype="dashed", color = "grey", size=.5, alpha = .75) +
geom_vline(xintercept=goes_to_hospital, linetype="dashed", color = "grey", size=.5, alpha = .75) +
geom_vline(xintercept=visits_supporters, linetype="dashed", color = "grey", size=.5, alpha = .75) +
geom_vline(xintercept=hosp_discharge_tweet, linetype="dashed", color = "grey", size=.5, alpha = .75) +
geom_vline(xintercept=hosp_discharge, linetype="dashed", color = "grey", size=.5, alpha = .75) +
geom_label(aes(x = debate, y=5.45, label='Debate'),hjust=.5,vjust=0,size=2, family='Helvetica', fontface='bold') +
geom_label(aes(x = hicks_positive, y=5.4, label='Aid tests positive'),hjust=.5,vjust=0,size=2, family='Helvetica', fontface='bold') +
geom_label(aes(x = positive_test_tweet, y=5.45, label='Positive test'),hjust=.5,vjust=0,size=2, family='Helvetica', fontface='bold') +
geom_label(aes(x = goes_to_hospital, y=5.4, label='Goes to hospital'),hjust=.5,vjust=0,size=2, family='Helvetica', fontface='bold') +
geom_label(aes(x = visits_supporters, y=5.45, label='Visits supporters'),hjust=.5,vjust=0,size=2, family='Helvetica', fontface='bold') +
geom_label(aes(x = hosp_discharge_tweet, y=5.45, label='Tweets about discharge'),hjust=.5,vjust=0,size=2, family='Helvetica', fontface='bold') +
geom_label(aes(x = hosp_discharge, y=5.4, label='Discharged from hospital'),hjust=.5,vjust=0,size=2, family='Helvetica', fontface='bold') +
geom_smooth(formula = y ~ x, method = "loess", span = .1, size = .75, color = "black") +
geom_point(aes(size = count*10)) +
scale_size_continuous(label=comma) +
ylim(5.0, 5.5) +
xlim(start,end) +
scale_x_datetime(limits = lims, breaks=breaks, labels=date_format("%b %d \n %I:%M %p", tz = "America/New_York")) +
xlab("Date") + ylab ("Tweet positivity") + labs(size='Tweet count') +
ggtitle("Positivity scores for tweets about President Trump") +
original_theme +
theme(legend.key=element_blank())
30.67 + 211.76 + 30.00
1980 + 1980 + 684
1400/3
1400/30
1400/30/3
15.55556*30
15.55556*20
1400 - 311.11
(1400 - 311.11) / 2 =
(1400 - 311.11) / 2
222.75 + 105-
222.75 + 1050
5!
dbinom(4, size=12, prob=0.2)
dbinom(90, size=10, prob=0.9)
dbinom(90, size=100, prob=0.9)
factorial(3)
factorial(90)
factorial(90)/(factorial(100)*factorial(10))
factorial(100)/(factorial(100)*factorial(10))
factorial(100)/(factorial(90)*factorial(10))
1.731031e+13 * .9^90 *.1^10
factorial(100)/(factorial(100)*factorial(0))
1 * .9^100 * .1^0
factorial(100)/(factorial(91)*factorial(9))
1.902232e+12 * .9^91 *.1^9
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
Sys.setenv(MAKEFLAGS = "-j4") # four cores used
install.packages("rstan", type = "source")
Sys.setenv(DOWNLOAD_STATIC_LIBV8 = 1)
remotes::install_github("jeroen/V8")
install.packages("rstan", type = "source")
install.packages("brms")
library(brms)
install.packages("brms")
iinstall.packages("brms")
install.packages("brms")
remove.packages("emmeans")
library(emmeans)
source('~/Desktop/TTforArran25Jul19/R_scripts/GitHub/analysis_code/ten_tors_CFA_PCA_analyses.R', echo=TRUE)
#clean environment
rm(list = ls())
#set current working directory to the one this script is in (when in RStudio)
code_dir = dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(code_dir)
#read metadata
metadata = readLines('../data/TTC_data_CFA_PCA_variables.csv', 2)
print(metadata)
#load the data
dat = read.csv('../data/TTC_data_CFA_PCA_variables.csv', skip = 2)
